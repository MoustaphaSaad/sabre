package std

@sample_func
@hlsl_method
@builtin {
	glsl = "texture"
	hlsl = "Sample"
}
func texture_sample(:Texture1D, :Sampler, :float): vec4

@sample_func
@hlsl_method
@builtin {
	glsl = "texture"
	hlsl = "Sample"
}
func texture_sample(:Texture2D, :Sampler, :vec2): vec4

@sample_func
@hlsl_method
@builtin {
	glsl = "texture"
	hlsl = "Sample"
}
func texture_sample(:Texture3D, :Sampler, :vec3): vec4

@hlsl_method
@builtin {
	hlsl = "Append"
}
func emit<T: type>(:TriangleStream<T>, :T)

@hlsl_method
@builtin {
	hlsl = "Append"
}
func emit<T: type>(:LineStream<T>, :T)

@hlsl_method
@builtin {
	hlsl = "Append"
}
func emit<T: type>(:PointStream<T>, :T)

@hlsl_method
@builtin {
	hlsl = "RestartStrip"
}
func end_primitive<T: type>(:TriangleStream<T>)

@hlsl_method
@builtin {
	hlsl = "RestartStrip"
}
func end_primitive<T: type>(:LineStream<T>)

@hlsl_method
@builtin {
	hlsl = "RestartStrip"
}
func end_primitive<T: type>(:PointStream<T>)

@builtin
func normalize(:vec4): vec4

@builtin
func normalize(:vec3): vec3

@builtin
func normalize(:vec2): vec2

@builtin
func normalize(:float): float

@builtin
func min(a, b: float): float

@builtin
func min(a, b: vec2): vec2

@builtin
func min(a, b: vec3): vec3

@builtin
func min(a, b: vec4): vec4

@builtin
func max(a, b: float): float

@builtin
func max(a, b: vec2): vec2

@builtin
func max(a, b: vec3): vec3

@builtin
func max(a, b: vec4): vec4

@builtin
func dot(a, b: vec4): float

@builtin
func dot(a, b: vec3): float

@builtin
func dot(a, b: vec2): float

@builtin
func cross(a, b: vec3): vec3

@builtin
func length(a: vec2): float

@builtin
func length(a: vec3): float

@builtin
func length(a: vec4): float

@builtin
func pow(base, power: float): float

@builtin
func pow(base, power: vec2): vec2

@builtin
func pow(base, power: vec3): vec3

@builtin
func pow(base, power: vec4): vec4

@builtin
func exp(a: float): float

@builtin
func exp(a: vec2): vec2

@builtin
func exp(a: vec3): vec3

@builtin
func exp(a: vec4): vec4

@builtin
func exp2(a: float): float

@builtin
func exp2(a: vec2): vec2

@builtin
func exp2(a: vec3): vec3

@builtin
func exp2(a: vec4): vec4

@builtin
func log(a: float): float

@builtin
func log(a: vec2): vec2

@builtin
func log(a: vec3): vec3

@builtin
func log(a: vec4): vec4

@builtin
func sqrt(a: float): float

@builtin
func sqrt(a: vec2): vec2

@builtin
func sqrt(a: vec3): vec3

@builtin
func sqrt(a: vec4): vec4

@builtin {
	glsl = "inversesqrt",
	hlsl = "rsqrt"
}
func inversesqrt(a: float): float

@builtin {
	glsl = "inversesqrt",
	hlsl = "rsqrt"
}
func inversesqrt(a: vec2): vec2

@builtin {
	glsl = "inversesqrt",
	hlsl = "rsqrt"
}
func inversesqrt(a: vec3): vec3

@builtin {
	glsl = "inversesqrt",
	hlsl = "rsqrt"
}
func inversesqrt(a: vec4): vec4

@builtin
func any(x: bvec2): bool

@builtin
func any(x: bvec3): bool

@builtin
func any(x: bvec4): bool

@builtin
func all(x: bvec2): bool

@builtin
func all(x: bvec3): bool

@builtin
func all(x: bvec4): bool

@builtin {
	glsl = "dFdx"
	hlsl = "ddx"
}
func ddx(a: float): float

@builtin {
	glsl = "dFdx"
	hlsl = "ddx"
}
func ddx(a: vec2): vec2

@builtin {
	glsl = "dFdx"
	hlsl = "ddx"
}
func ddx(a: vec3): vec3

@builtin {
	glsl = "dFdx"
	hlsl = "ddx"
}
func ddx(a: vec4): vec4

@builtin {
	glsl = "dFdy"
	hlsl = "ddy"
}
func ddy(a: float): float

@builtin {
	glsl = "dFdy"
	hlsl = "ddy"
}
func ddy(a: vec2): vec2

@builtin {
	glsl = "dFdy"
	hlsl = "ddy"
}
func ddy(a: vec3): vec3

@builtin {
	glsl = "dFdy"
	hlsl = "ddy"
}
func ddy(a: vec4): vec4

@builtin
func sin(a: float): float

@builtin
func sin(a: vec2): vec2

@builtin
func sin(a: vec3): vec3

@builtin
func sin(a: vec4): vec4

@builtin
func cos(a: float): float

@builtin
func cos(a: vec2): vec2

@builtin
func cos(a: vec3): vec3

@builtin
func cos(a: vec4): vec4

@builtin
func tan(a: float): float

@builtin
func tan(a: vec2): vec2

@builtin
func tan(a: vec3): vec3

@builtin
func tan(a: vec4): vec4

@builtin
func asin(a: float): float

@builtin
func asin(a: vec2): vec2

@builtin
func asin(a: vec3): vec3

@builtin
func asin(a: vec4): vec4

@builtin
func acos(a: float): float

@builtin
func acos(a: vec2): vec2

@builtin
func acos(a: vec3): vec3

@builtin
func acos(a: vec4): vec4

@builtin
func atan(a: float): float

@builtin
func atan(a: vec2): vec2

@builtin
func atan(a: vec3): vec3

@builtin
func atan(a: vec4): vec4

@builtin {
	glsl = "atan",
	hlsl = "atan2"
}
func atan(y, x: float): float

@builtin {
	glsl = "atan",
	hlsl = "atan2"
}
func atan(y, x: vec2): vec2

@builtin {
	glsl = "atan",
	hlsl = "atan2"
}
func atan(y, x: vec3): vec3

@builtin {
	glsl = "atan",
	hlsl = "atan2"
}
func atan(y, x: vec4): vec4

@builtin
func abs(a: float): float

@builtin
func abs(a: vec2): vec2

@builtin
func abs(a: vec3): vec3

@builtin
func abs(a: vec4): vec4

@builtin
func sign(a: float): float

@builtin
func sign(a: vec2): vec2

@builtin
func sign(a: vec3): vec3

@builtin
func sign(a: vec4): vec4

@builtin {
	glsl = "fract",
	hlsl = "frac"
}
func fract(a: float): float

@builtin {
	glsl = "fract",
	hlsl = "frac"
}
func fract(a: vec2): vec2

@builtin {
	glsl = "fract",
	hlsl = "frac"
}
func fract(a: vec3): vec3

@builtin {
	glsl = "fract",
	hlsl = "frac"
}
func fract(a: vec4): vec4

@builtin
func smoothstep(x, y, a: float): float

@builtin
func smoothstep(x, y, a: vec2): vec2

@builtin
func smoothstep(x, y, a: vec3): vec3

@builtin
func smoothstep(x, y, a: vec4): vec4

@builtin
func smoothstep(x, y: float, a: vec2): vec2

@builtin
func smoothstep(x, y: float, a: vec3): vec3

@builtin
func smoothstep(x, y: float, a: vec4): vec4

@builtin {
	glsl = "mix"
	hlsl = "lerp"
}
func lerp(x, y, a: float): float

@builtin {
	glsl = "mix"
	hlsl = "lerp"
}
func lerp(x, y, a: vec2): vec2

@builtin {
	glsl = "mix"
	hlsl = "lerp"
}
func lerp(x, y, a: vec3): vec3

@builtin {
	glsl = "mix"
	hlsl = "lerp"
}
func lerp(x, y, a: vec4): vec4

@builtin {
	glsl = "mix"
	hlsl = "lerp"
}
func lerp(x, y: vec2, a: float): vec2

@builtin {
	glsl = "mix"
	hlsl = "lerp"
}
func lerp(x, y: vec3, a: float): vec3

@builtin {
	glsl = "mix"
	hlsl = "lerp"
}
func lerp(x, y: vec4, a: float): vec4

const MAX_COLOR_ATTACHMENT = 4;

type Pipeline struct {
	rasterizer: Rasterizer,
	depth: Depth,
	independent_blend: bool = false,
	blend: [MAX_COLOR_ATTACHMENT]Blend,
}

type Rasterizer struct {
	cull: bool = true,
	face: Face = .Back,
	front: Orientation = .CCW,
	scissor: bool = false,
}

type Face enum {
	None,
	Back,
	Front,
	Front_Back,
}

type Orientation enum {
	None,
	CCW,
	CW,
}

type Depth struct {
	depth_test: bool = true,
	depth_write: bool = true,
}

type Blend struct {
	enabled: bool = true,
	src_rgb: Blend_Param = .Src_Alpha,
	dst_rgb: Blend_Param = .One_Minus_Src_Alpha,
	src_alpha: Blend_Param = .One,
	dst_alpha: Blend_Param = .One_Minus_Src_Alpha,
	eq_rgb, eq_alpha: Blend_Eq = .Add,
	color_mask: Color_Mask = .All,
}

type Blend_Param enum {
	None,
	Zero,
	One,
	Src_Color,
	One_Minus_Src_Color,
	Dst_Color,
	One_Minus_Dst_Color,
	Src_Alpha,
	One_Minus_Src_Alpha,
	Dst_Alpha,
	One_Minus_Dst_Alpha,
}

type Blend_Eq enum {
	None,
	Add,
	Subtract,
	Min,
	Max,
}

type Color_Mask enum {
	None = -1,
	Default = 0,
	Red = 1 << 0,
	Green = 1 << 1,
	Blue = 1 << 2,
	Alpha = 1 << 3,
	All = .Red | .Green | .Blue | .Alpha,
}
