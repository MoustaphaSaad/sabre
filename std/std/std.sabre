@builtin {
	glsl = "texture"
}
func texture_sample(:Texture2D, :vec2): vec4

@builtin
func normalize(:vec4): vec4

@builtin
func normalize(:vec3): vec3

@builtin
func normalize(:vec2): vec2

@builtin
func normalize(:float): float

@builtin
func max(a, b: float): float

@builtin
func dot(a, b: vec4): float

@builtin
func dot(a, b: vec3): float

@builtin
func dot(a, b: vec2): float

const MAX_COLOR_ATTACHMENT = 4;

type Pipeline struct {
	rasterizer: Rasterizer,
	depth: Depth,
	independent_blend: bool = false,
	blend: [MAX_COLOR_ATTACHMENT]Blend,
}

type Rasterizer struct {
	cull: bool = true,
	face: Face = .Back,
	front: Orientation = .CCW,
	scissor: bool = false,
}

type Face enum {
	None = 0,
	Back = 1,
	Front = 2,
	Front_Back = 3,
}

type Orientation enum {
	None,
	CCW,
	CW,
}

type Depth struct {
	depth_test: bool = true,
	depth_write: bool = true,
}

type Blend struct {
	enabled: bool = true,
	src_rgb: Blend_Param = .Src_Alpha,
	dst_rgb: Blend_Param = .One_Minus_Src_Alpha,
	src_alpha: Blend_Param = .One,
	dst_alpha: Blend_Param = .One_Minus_Src_Alpha,
	eq_rgb, eq_alpha: Blend_Eq = .Add,
	color_mask: Color_Mask = .All,
}

type Blend_Param enum {
	None,
	Zero,
	One,
	Src_Color,
	One_Minus_Src_Color,
	Dst_Color,
	One_Minus_Dst_Color,
	Src_Alpha,
	One_Minus_Src_Alpha,
}

type Blend_Eq enum {
	None,
	Add,
	Subtract,
	Min,
	Max,
}

type Color_Mask enum {
	None = -1,
	Default = 0,
	Red = 1,
	Green = 2,
	Blue = 4,
	Alpha = 8,
	All = 15,
}
