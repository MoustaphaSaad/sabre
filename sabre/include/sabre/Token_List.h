#pragma once

#define TOKEN_LIST(TOKEN) \
	TOKEN(NONE, "<NONE>"), \
	TOKEN(EOF, "<EOF>"), \
	TOKEN(ID, "<ID>"), \
	TOKEN(COMMENT, "<COMMENT>"), \
	TOKEN(LITERAL_INTEGER, "<INTEGER>"), \
	TOKEN(LITERAL_FLOAT, "<FLOAT>"), \
	TOKEN(LITERAL_STRING, "<STRING>"), \
	TOKEN(OPEN_PAREN, "("), \
	TOKEN(CLOSE_PAREN, ")"), \
	TOKEN(OPEN_CURLY, "{"), \
	TOKEN(CLOSE_CURLY, "}"), \
	TOKEN(OPEN_BRACKET, "["), \
	TOKEN(CLOSE_BRACKET, "]"), \
	TOKEN(COLON, ":"), \
	TOKEN(SEMICOLON, ";"), \
	TOKEN(DOT, "."), \
	TOKEN(LESS, "<"), \
	TOKEN(GREATER, ">"), \
	TOKEN(LESS_EQUAL, "<="), \
	TOKEN(GREATER_EQUAL, ">="), \
	TOKEN(EQUAL, "="), \
	TOKEN(EQUAL_EQUAL, "=="), \
	TOKEN(NOT_EQUAL, "!="), \
	TOKEN(PLUS, "+"), \
	TOKEN(MINUS, "-"), \
	TOKEN(STAR, "*"), \
	TOKEN(DIVIDE, "/"), \
	TOKEN(MODULUS, "%"), \
	TOKEN(PLUS_EQUAL, "+="), \
	TOKEN(MINUS_EQUAL, "-="), \
	TOKEN(STAR_EQUAL, "*="), \
	TOKEN(DIVIDE_EQUAL, "/="), \
	TOKEN(MODULUS_EQUAL, "%="), \
	TOKEN(LOGICAL_OR, "||"), \
	TOKEN(LOGICAL_AND, "&&"), \
	TOKEN(LOGICAL_NOT, "!"), \
	TOKEN(INC, "++"), \
	TOKEN(DEC, "--"), \
	TOKEN(COMMA, ","), \
	TOKEN(AT, "@"), \
	TOKEN(KEYWORDS__BEGIN, ""), \
	TOKEN(KEYWORD_CONST, "const"), \
	TOKEN(KEYWORD_VAR, "var"), \
	TOKEN(KEYWORD_TYPE, "type"), \
	TOKEN(KEYWORD_STRUCT, "struct"), \
	TOKEN(KEYWORD_FUNC, "func"), \
	TOKEN(KEYWORD_RETURN, "return"), \
	TOKEN(KEYWORD_DISCARD, "discard"), \
	TOKEN(KEYWORD_CONTINUE, "continue"), \
	TOKEN(KEYWORD_BREAK, "break"), \
	TOKEN(KEYWORD_IMPORT, "import"), \
	TOKEN(KEYWORD_IF, "if"), \
	TOKEN(KEYWORD_ELSE, "else"), \
	TOKEN(KEYWORD_FOR, "for"), \
	TOKEN(KEYWORD_FALSE, "false"), \
	TOKEN(KEYWORD_TRUE, "true"), \
	TOKEN(KEYWORD_ENUM, "enum"), \
	TOKEN(KEYWORDS__END, ""),