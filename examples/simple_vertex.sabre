package main

import "std"
import "engine.sabre"

type Camera struct {
	view, proj, viewproj: mat4,
	x: int
}

@uniform{binding = 3} var camera: Camera;

@reflect
const p: std.Pipeline = {

};

@reflect
const draw_id = 2000;

type VS_Input struct {
	position: vec3,
}

type VS_Input2 struct {
	@COLOR position: vec3,
}

type PS_Input struct {
	@system_position position: vec4,
}

type Dir_Light struct {
	dir: vec3,
	color: vec3,
}

const DIR_LIGHT_MAX = 4;

type Lighting struct {
	dir_lights: [DIR_LIGHT_MAX]Dir_Light,
	dir_lights_count: int,
}

@uniform var lighting: Lighting;

type Config struct {
	clip_pos: vec3,
	clip_enabled: int,
	clip_norm: vec3,
	window_level: float,
	roi_min: vec3,
	crop_enabled: int,
	roi_max: vec3,
	window_width: float,
	slicing_dir: vec3,
	noise_tex_size: vec2
}

@uniform{binding = 2} var config: Config;

@vertex
func vertex(vs_input: VS_Input, vs_input2: VS_Input2): PS_Input {
	config.clip_pos;
	lighting.dir_lights[0];
	return :PS_Input {
		position = camera.viewproj * monet.camera.viewproj * :vec4{vs_input.position * vs_input2.position, 1},
	};
}